<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Angara.Table</name></assembly>
<members>
<member name="M:Funcs.getNthResultType``2(System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Returns a System.Type of the result of a curried function of given order.
 If n is 1, returns typeof&lt;&apos;b&gt;; 
 If n is 2, &apos;a-&gt;&apos;b is &apos;a-&gt;&apos;c-&gt;&apos;d and return typeof&lt;&apos;d&gt;; 
 and so on for n in 3, 4, ... .
 Fails for n &lt; 1.
</summary>
</member>
<member name="M:Funcs.toDelegate_UnwrapArrays``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Creates a delegate from a curried function, but each parameter of the delegate is a 1d-array with a single element to be passed to the original function.
</summary>
</member>
<member name="M:Funcs.toDelegate``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Creates a delegate from a curried function.
</summary>
</member>
<member name="M:Util.select``1(System.Boolean[],System.Collections.Immutable.ImmutableArray{``0})">
<summary>
 Returns an array which has all elements of `arr` that correspond to `true` of `mask`.
 Requires that lengths of `mask` and `arr` are equal.
</summary>
</member>
<member name="T:Angara.Data.MatrixTable`1">
<summary>
 A table with columns of same type.
</summary>
</member>
<member name="T:Angara.Data.Table`1">
<summary>
 A table that stores rows as a collection of typed objects.
</summary>
</member>
<member name="P:Angara.Data.Table.TryItem(System.String)">
<summary>
 Tries to get a column by its name.
 If there are several columns with same name, returns the fist column having the name.
</summary>
</member>
<member name="P:Angara.Data.Table.TryItem(System.Int32)">
<summary>
 Tries to get a column by its index.
</summary>
</member>
<member name="P:Angara.Data.Table.RowsCount">
<summary>
 Gets a count of the total number rows in the table.
</summary>
</member>
<member name="P:Angara.Data.Table.Item(System.String)">
<summary>
 Gets a column by its name.
 If there are several columns with same name, returns the fist column having the name.
</summary>
</member>
<member name="P:Angara.Data.Table.Item(System.Int32)">
<summary>
 Gets a column by its index.
</summary>
</member>
<member name="P:Angara.Data.Table.Empty">
<summary>
 Creates a new, empty table
</summary>
</member>
<member name="P:Angara.Data.Table.Count">
<summary>
 Gets a count of the total number of columns in the table.
</summary>
</member>
<member name="M:Angara.Data.Table.Transform``3(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{System.Collections.Immutable.ImmutableArray{``0},``1},Angara.Data.Table)">
<summary>
 Applies the given function to the values of the given table columns and returns the function result.
 Each column is represented as an immutable array.
 The generic transform function is only partially defined.
</summary>
</member>
<member name="M:Angara.Data.Table.ToRows``1">
<summary>
 Builds and returns rows of the table represented as a sequence of instances of the type &apos;`r&apos;,
 so that one instance of `&apos;r` corresponds to one row of the table with the order respected.
 
 Columns are mapped to public properties of `&apos;r`. If there is a column in the table such that &apos;`r&apos; has no 
 public property with same name, the column is ignored. Next, if &apos;`r&apos; has a property such that
 there is no column with same name, the function fails with an exception.

 The method uses reflection to build instances of `&apos;r` from the table columns:
 - If `&apos;r` is F# record, then for each property of the type there must be a corresponding column of identical type.
 - Otherwise, then `&apos;r` has default constructor and for each public writable property there must be a column of same name and type as the property.
</summary>
</member>
<member name="M:Angara.Data.Table.Save(Angara.Data.Table,System.IO.TextWriter,Angara.Data.DelimitedFile.WriteSettings)">
<summary>
 Saves the table to a delimited text stream using given writer.
</summary>
</member>
<member name="M:Angara.Data.Table.Save(Angara.Data.Table,System.IO.TextWriter)">
<summary>
 Saves the table to a delimited text stream using given writer.
</summary>
</member>
<member name="M:Angara.Data.Table.Save(Angara.Data.Table,System.String,Angara.Data.DelimitedFile.WriteSettings)">
<summary>
 Saves the table to a delimited text file, overwriting an existing file, if it exists.
</summary>
</member>
<member name="M:Angara.Data.Table.Save(Angara.Data.Table,System.String)">
<summary>
 Saves the table to a delimited text file, overwriting an existing file, if it exists.
</summary>
</member>
<member name="M:Angara.Data.Table.Remove(System.Collections.Generic.IEnumerable{System.String},Angara.Data.Table)">
<summary>
 Creates a new table that has all columns of the original table excluding the columns having name
 contained in the given column names.
</summary>
</member>
<member name="M:Angara.Data.Table.OfRows``1(System.Collections.Immutable.ImmutableArray{``0})">
<summary>
 Builds a table such that each public property of a given type `&apos;r` 
 becomes the table column with the name and type identical to the property;
 each table row corresponds to an element of the input sequence with the order respected.
 If the type `&apos;r` is an F# record, the order of columns is identical to the record properties order.
 If there is a public property having a type that is not valid for a table column, the function fails with an exception.
</summary>
</member>
<member name="M:Angara.Data.Table.OfRows``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
 Builds a table such that each public property of a given type `&apos;r` 
 becomes the table column with the name and type identical to the property;
 each table row corresponds to an element of the input sequence with the order respected.
 If the type `&apos;r` is an F# record, the order of columns is identical to the record properties order.
 If there is a public property having a type that is not valid for a table column, the function fails with an exception.
</summary>
</member>
<member name="M:Angara.Data.Table.OfMatrix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}})">
<summary>
 Builds a matrix table such that all columns have same type. Matrix table
 exposes its content as a two-dimensional array as well as a collection of columns.
 If column names are missed, the default names are given; see `Table.DefaultColumnName` function.
</summary>
</member>
<member name="M:Angara.Data.Table.OfColumns(System.Collections.Generic.IEnumerable{Angara.Data.Column})">
<summary>
 Builds a table from a finite sequence of columns.
 All given columns must be of same height. 
 Duplicate column names are allowed.
 Order of columns in the table is same as in the input sequence.
</summary>
</member>
<member name="M:Angara.Data.Table.MapiToColumn``1(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0},Angara.Data.Table)">
<summary>
 Builds a new table that contains all columns of the given table and a new column or a replacement of an original table column;
 elements of the column are the results of applying the given function to each of the rows of the given table columns.
 The integer index passed to the function indicates the index of row being transformed.
 The generic `map` function is only partially defined.
 Ultimate result type of the map function must be either `float`, `int`, `string`, `bool` or `DateTime`.
</summary>
</member>
<member name="M:Angara.Data.Table.Mapi``2(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0},Angara.Data.Table)">
<summary>
 Builds a new sequence whose elements are the results of applying the given function &apos;map&apos;
 to each of the rows of the given table columns. 
 The integer index passed to the function indicates the index of row being transformed.
 The generic `map` function is only partially defined.
</summary>
</member>
<member name="M:Angara.Data.Table.MapToColumn``2(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Angara.Data.Table)">
<summary>
 Builds a new table that contains all columns of the given table and a new column or a replacement of an original table column;
 elements of the column are the results of applying the given function to each of the rows of the given table columns.
 The generic `map` function is only partially defined.
 Ultimate result type of the map function must be either `float`, `int`, `string`, `bool` or `DateTime`.
</summary>
</member>
<member name="M:Angara.Data.Table.Map``3(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Angara.Data.Table)">
<summary>
 Builds a new sequence whose elements are the results of applying the given function &apos;map&apos;
 to each of the rows of the given table columns. The generic `map` function is only partially defined.
</summary>
</member>
<member name="M:Angara.Data.Table.Load(System.IO.TextReader,Angara.Data.DelimitedFile.ReadSettings)">
<summary>
 Loads a table from a delimited text stream using given reader.
</summary>
</member>
<member name="M:Angara.Data.Table.Load(System.IO.TextReader)">
<summary>
 Loads a table from a delimited text stream using given reader.
</summary>
</member>
<member name="M:Angara.Data.Table.Load(System.String,Angara.Data.DelimitedFile.ReadSettings)">
<summary>
 Loads a table from a delimited text file.
</summary>
</member>
<member name="M:Angara.Data.Table.Load(System.String)">
<summary>
 Loads a table from a delimited text file.
</summary>
</member>
<member name="M:Angara.Data.Table.Filteri``1(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0},Angara.Data.Table)">
<summary>
 The function `Table.Filter` returns a new table containing only the rows of the table for which the given predicate returns `true`.
 The predicate gets values of the given columns only. An integer index passed to the predicate is the index of row being filtered.
 The generic predicate function is only partially defined.
</summary>
</member>
<member name="M:Angara.Data.Table.Filter``2(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{``0,``1},Angara.Data.Table)">
<summary>
 The function `Table.Filter` returns a new table containing only the rows of the table for which the given predicate returns `true`.
 The predicate gets values of the given columns only.
 The generic predicate function is only partially defined.
</summary>
</member>
<member name="M:Angara.Data.Table.DefaultColumnName(System.Int32)">
<summary>
 Returns a default column from a column index. The produced names are similar to Excel column names; e.g.
 &quot;A&quot;, &quot;B&quot;, ..., &quot;Z&quot;, &quot;AA&quot;, &quot;AB&quot;, ...
</summary>
</member>
<member name="M:Angara.Data.Table.AppendTransform``2(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpFunc{System.Collections.Immutable.ImmutableArray{``0},``1},Angara.Data.Table)">
<summary>
 Builds a new table that contains columns of the given table appended with columns of a table produced by the
 given function applied to the values of the given table columns.
 The generic transform function is only partially defined but its ultimate result must be of type `Table`.
</summary>
</member>
<member name="M:Angara.Data.Table.AppendMatrix``1(Angara.Data.MatrixTable{``0},Angara.Data.MatrixTable{``0})">
<summary>
 Builds a new matrix table by concatenting columns of two given matrix tables. Duplicate column names are allowed.
</summary>
</member>
<member name="M:Angara.Data.Table.Append(Angara.Data.Table,Angara.Data.Table)">
<summary>
 Builds a new table that contains the columns of both given tables in order. Duplicate column names are allowed.
</summary>
</member>
<member name="M:Angara.Data.Table.Add(Angara.Data.Column,Angara.Data.Table)">
<summary>
 Creates a new table that has all columns of the original table appended with the given column.
 Duplicate names are allowed.
</summary>
</member>
<member name="T:Angara.Data.Table">
<summary>
 Represents a table wich is an immutable list of named columns.
 The type is thread safe.
</summary>
</member>
<member name="P:Angara.Data.Column.Rows">
<summary>
 Returns column values.
</summary>
</member>
<member name="P:Angara.Data.Column.Height">
<summary>
 Gets a count of the total number of values in the column.
</summary>
</member>
<member name="M:Angara.Data.Column.Create(System.String,System.Collections.Generic.IEnumerable{System.DateTime},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Creates a column from string name, a sequence of values and an optional count of the number of values.
</summary>
</member>
<member name="M:Angara.Data.Column.Create(System.String,System.Collections.Generic.IEnumerable{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Creates a column from string name, a sequence of values and an optional count of the number of values.
</summary>
</member>
<member name="M:Angara.Data.Column.Create(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Creates a column from string name, a sequence of values and an optional count of the number of values.
</summary>
</member>
<member name="M:Angara.Data.Column.Create(System.String,System.Collections.Generic.IEnumerable{System.Double},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Creates a column from string name, a sequence of values and an optional count of the number of values.
</summary>
</member>
<member name="M:Angara.Data.Column.Create(System.String,System.Collections.Generic.IEnumerable{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Creates a column from string name, a sequence of values and an optional count of the number of values.
</summary>
</member>
<member name="T:Angara.Data.Column">
<summary>
 Represents a table column which is a pair of column name and an immutable array of one of the supported types.
</summary>
</member>
<member name="P:Angara.Data.ColumnValues.AsInt">
<summary>
 If this instance is IntColumn, returns the immutable integer array; otherwise, throws `InvalidCastException`.
 If the column array has not been evalutated before, this function performs the execution of the Lazy instance.
</summary>
</member>
<member name="M:Angara.Data.ColumnValues.Item(System.Int32)">
<summary>
 Returns a column field at the specified row index.
 If the column array has not been evalutated before, this function performs the execution of the Lazy instance.
</summary>
</member>
<member name="T:Angara.Data.ColumnValues">
<summary>
 Represents data values of a table column as an immutable array of one of the supported types which is computed on demand.
</summary>
</member>
<member name="P:Angara.Data.DataValue.AsInt">
<summary>
 If this instance is IntValue, returns the integer value; otherwise, throws `InvalidCastException`.
</summary>
</member>
<member name="T:Angara.Data.DataValue">
<summary>
 Represents a single value of a table column.
</summary>
</member>
<member name="M:Angara.Data.TableViewSettings.Create(Angara.Data.TableViewerTab,Angara.Data.PageSize,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
<summary>
 Create TableViewSettings.
 customFormatters if an IDictionary&lt;string, string&gt; where keys are names of corresponding table columns
 and values are bodies of javascript functions x -&gt; string performing the desired formatting
 e.g. &quot;return x.toFixed(2);&quot; Note, that the name of the formal parameter passed into this function is always &quot;x&quot;
</summary>
</member>
<member name="M:Angara.Data.TableViewSettings.Create(Angara.Data.TableViewerTab,Angara.Data.PageSize,System.Boolean,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpMap{System.String,System.String}})">
<summary>
 Create TableViewSettings.
 customFormatters if a Map&lt;string, string&gt; where keys are names of corresponding table columns
 and values are bodies of javascript functions x -&gt; string performing the desired formatting
 e.g. &quot;return x.toFixed(2);&quot; Note, that the name of the formal parameter passed into this function is always &quot;x&quot;
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.ReadSettings.ColumnTypes">
<summary>
 An optional value that allows a user to specify element types for some of columns. This allows
 to read integer columns since automatic inference always uses Double type for numeric values.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.ReadSettings.ColumnsCount">
<summary>
 An optional value that allows a user to provide an expected number of columns. If number of actually read columns differs from expected, then reading fails.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.ReadSettings.HasHeader">
<summary>
 If true, the first line is considered as a header of the table.
 This header will contain names corresponding to the fields in the file
 and should contain the same number of fields as the records in
 the rest of the file. Otherwise, if false, the first line is a data line and columns are named as A, B, C..., Z, AA, AB, ...
 ; see `Table.DefaultColumnName` function.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.ReadSettings.InferNullStrings">
<summary>
 If true, double quotes (&quot;&quot;) are considered as empty string and an empty string is considered as null; 
 otherwise, if false, both cases are considered as an empty string.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.ReadSettings.Delimiter">
<summary>
 Determines which character delimits columns.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.ReadSettings.Default">
<summary>
 Expects comma as delimiter, has header, doesn&apos;t infer null strings, and doesn&apos;t predefine column count or types.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.WriteSettings.SaveHeader">
<summary>
 If true, the first line will contain names corresponding to the columns of the table.
 Otherwise, if false, the first line is a data line.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.WriteSettings.AllowNullStrings">
<summary>
 If true, writes null strings as an empty string and an empty string as double quotes (&quot;&quot;), 
 so that these cases could be distinguished; otherwise, if false, throws an exception if null is 
 in a string data array.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.WriteSettings.Delimiter">
<summary>
 Determines which character will delimit columns.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.WriteSettings.Default">
<summary>
 Uses comma as delimiter, saves a header, and disallows null strings.
</summary>
</member>
<member name="T:Angara.Data.DelimitedFile.Delimiter">
<summary>
 Determines a character that delimits columns of a table.
</summary>
</member>
<member name="M:Angara.Data.DelimitedFile.Implementation.Write(Angara.Data.DelimitedFile.WriteSettings,System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Collections.IList}})">
<summary>
 Writes a sequence of named arrays in a delimited text format (e.g. CSV).
</summary>
</member>
<member name="M:Angara.Data.DelimitedFile.Implementation.Read(Angara.Data.DelimitedFile.ReadSettings,System.IO.TextReader)">
<summary>
 Reads a table from a delimited text format.
</summary>
</member>
<member name="T:Angara.Data.DelimitedFile.Implementation">
<summary>
 Implements writer and reader for a text representation of a list of named arrays of certain types.
 The implementation mostly follows RFC 4180, but in addition to comma separator, it supports tab, semicolon and space.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.ColumnSchema.Type">
<summary>
 Type of a column.
</summary>
</member>
<member name="P:Angara.Data.DelimitedFile.ColumnSchema.Name">
<summary>
 Name of a column.
</summary>
</member>
<member name="T:Angara.Data.DelimitedFile.ColumnSchema">
<summary>
 Describes a table column.
</summary>
</member>
<member name="T:Angara.Data.DelimitedFile.ColumnType">
<summary>
 Type of column elements.
</summary>
</member>
<member name="M:Angara.Data.DelimitedFile.Helpers.indexToName(System.Int32)">
<summary>
 Produces a non-empty string to be used as a name of a column with the given index.
 The produced names are similar to Excel column names; e.g.
 index 28 gives the name &quot;AC&quot;.
</summary>
</member>
<member name="M:Angara.Data.DelimitedFile.Helpers.escapeString(System.String,System.String,System.Boolean)">
<summary>
 Makes the string proper to write in a CSV file. See rules in comments for splitRow.
</summary>
</member>
<member name="M:Angara.Data.DelimitedFile.Helpers.inferColumnTypes(Angara.Data.DelimitedFile.InferredColumnSchema[],System.String[])">
<summary>
 Process string items of a source line and updates `schema` &apos;s column types taking into account the given items.
</summary>
</member>
<member name="M:Angara.Data.DelimitedFile.Helpers.ensureLength(System.Int32,System.String[])">
<summary>
 Returns the same items but appended with null strings in order to have same length as number of columns.
</summary>
</member>
<member name="M:Angara.Data.DelimitedFile.Helpers.readHeader(System.Char,System.IO.TextReader)">
<summary>
 Reads header from the file specified by the reader.
</summary>
</member>
<member name="M:Angara.Data.DelimitedFile.Helpers.splitRow(System.Char,System.IO.TextReader)">
<summary>
 Splits string lines read from the given TextReader by delimeter; supports escaping using double quotes and quoted elements with newlines.
 Returns None, if input stream is ended;
 Some of split items, otherwise.

 The rules are:
 - null is represented as an empty string []
 - empty string is represented as double quotes [&quot;&quot;]    
 - a string that contains either quote, newline or a delimiter, its quotes are replaced with double quotes and surrounded with quotes;
 - otherwise, used as it.
 - escaped string always starts from the beginning but can continue after end quote which is end of escaped string, 
   but the rest part cannot be escaped again (see Excel), e.g. 
     [&quot;hello &quot;&quot;ABC&quot;&quot;&quot; from &quot;DEF&quot;] is read to [hello &quot;ABC&quot; from &quot;DEF&quot;]

 Example of special cases for strings ( &apos;[...]&apos; indicate a cell text, surrounded with a delimiter or new line or end of file ):

 (value)                 (written as)                
 --------------------------------------------------------
 null                    []  (empty string)
 (empty string)          [&quot;&quot;] (double quotes)
 &quot; (single quote)        [&quot;&quot;&quot;&quot;] 
 .\n.. (escaped string)  [&quot;.\n..&quot;]
 &quot;... (string starting with quote)
                         [&quot;&quot;&quot;...&quot;] 
 &quot;.\n.. (escaped string starting with quote)
                         [&quot;&quot;&quot;.\n..&quot;]
</summary>
</member>
<member name="T:Angara.Data.TableStatistics.ColumnSummary.BooleanColumnSummary">
<summary>
 Statistics for Boolean columns
</summary>
</member>
<member name="T:Angara.Data.TableStatistics.ColumnSummary.DateColumnSummary">
<summary>
 Statistics for DateTime columns
</summary>
</member>
<member name="T:Angara.Data.TableStatistics.ColumnSummary.StringColumnSummary">
<summary>
 Statistics for string columns
</summary>
</member>
<member name="T:Angara.Data.TableStatistics.ColumnSummary.NumericColumnSummary">
<summary>
 Statistics for int and real columns
</summary>
</member>
<member name="T:Angara.Data.TableStatistics.ColumnSummary">
<summary>
 Holds statistics for each column type
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.BooleanColumnSummary.FalseCount">
<summary>
 Number of rows with value &quot;false&quot;
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.BooleanColumnSummary.TrueCount">
<summary>
 Number of rows with value &quot;true&quot;
</summary>
</member>
<member name="T:Angara.Data.TableStatistics.BooleanColumnSummary">
<summary>
 Simple statistics for columns containing boolean values.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.ComparableColumnSummary`1.Count">
<summary>
 Number of elements in the column except for missing values,
 which is null or empty string.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.ComparableColumnSummary`1.TotalCount">
<summary>
 Total number of elements in the column.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.ComparableColumnSummary`1.Max">
<summary>
 A maximum value of the column.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.ComparableColumnSummary`1.Min">
<summary>
 A minimum value of the column.
</summary>
</member>
<member name="T:Angara.Data.TableStatistics.ComparableColumnSummary`1">
<summary>
 Simple statistics for columns containing non-numeric data
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.RealColumnSummary.Count">
<summary>
 Number of elements in the column except for NaNs.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.RealColumnSummary.TotalCount">
<summary>
 Total number of elements in the column.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.RealColumnSummary.Ub95">
<summary>
 Upper bound of 95-th percentile.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.RealColumnSummary.Ub68">
<summary>
 Upper bound of 68-th percentile.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.RealColumnSummary.Lb68">
<summary>
 Lower bound of 68-th percentile.
</summary>
</member>
<member name="P:Angara.Data.TableStatistics.RealColumnSummary.Lb95">
<summary>
 Lower bound of 95-th percentile.
</summary>
</member>
<member name="T:Angara.Data.TableStatistics.RealColumnSummary">
<summary>
 Basic statistics for columns containing numeric data
</summary>
</member>
<member name="M:Angara.Data.TableStatistics.Pdf(System.Int32,Angara.Data.Column)">
<summary>
 Returns a probability density function of the column if the column is numeric.
</summary>
</member>
<member name="M:Angara.Data.TableStatistics.TryPdf(System.Int32,Angara.Data.Column)">
<summary>
 Tries to compute a probability density function of the column if the column is numeric.
</summary>
</member>
<member name="M:Angara.Data.TableStatistics.Summary(Angara.Data.Column)">
<summary>
 Returns some simple statistical properties of a column.
</summary>
</member>
<member name="M:Angara.Data.TableStatistics.Correlation(Angara.Data.Table)">
<summary>
 If at least two of the table columns are real or int then returns (Column Names) * (Correlations)
 else throws an exception.
</summary>
</member>
<member name="M:Angara.Data.TableStatistics.TryCorrelation(Angara.Data.Table)">
<summary>
 If at least two of the columns are real or int then Some(Column Names * Correlations)
 else None
</summary>
</member>
<member name="T:Angara.Data.TableSerializers.TableReinstateSerializer">
<summary>
 The serializer keeps table schema as typed InfoSet and 
 table data formatted as CSV and represented as a InfoSet blob.
</summary>
</member>
</members>
</doc>
